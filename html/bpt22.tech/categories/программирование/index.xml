<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ПРОГРАММИРОВАНИЕ on Evgen Pyanykh</title><link>//bpt22.tech/categories/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link><description>Recent content in ПРОГРАММИРОВАНИЕ on Evgen Pyanykh</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Sun, 22 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="//bpt22.tech/categories/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>Скучное тестирование web приложения</title><link>//bpt22.tech/posts/2022-05-22-%D1%81%D0%BA%D1%83%D1%87%D0%BD%D0%BE%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-web-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2022-05-22-%D1%81%D0%BA%D1%83%D1%87%D0%BD%D0%BE%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-web-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/</guid><description>У разработчиков при упоминании покрытия тестами их продукта сразу возникают вопросы:
Что именно тестировать? Какое должно быть покрытие? Каких тестов должно быть больше? И часто пытаются использовать популярную пирамиду тестирования
Я в ней увидел, что основа это Unit тесты на которых все держится. Unit тестов должно быть много, а UI/API мало. Пописав много тестов я пришел к расширению этой диаграммы и добавил в нее оси по которым можно ориентироваться.</description></item><item><title>Скучная архитектура web приложения</title><link>//bpt22.tech/posts/2022-04-07-%D1%81%D0%BA%D1%83%D1%87%D0%BD%D0%B0%D1%8F-%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0-web-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2022-04-07-%D1%81%D0%BA%D1%83%D1%87%D0%BD%D0%B0%D1%8F-%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0-web-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/</guid><description>Среди множества сложных диаграм Гексагональных, Слоеных и абревиатурных архитектур можно быстро усложнить себе жизнь в полевых испытаниях жизнеспособности их в реальном проекте и масштабировании на новых сотрудников. По этому я разделяю подход к разработке &amp;ldquo;Ресторанный&amp;rdquo; и &amp;ldquo;Фастфудный&amp;rdquo;.
Ресторанный - изысканое изделие которое могут повторить только крутые повара, а если за них берутся менее квалифицированные специалисты или повара которые не любят такую кухню, то блюдо превращается в винегрет и теряет свой вкус со временем.</description></item><item><title>SPL VS процедуры и 5.6 VS 7 очередь (queue)</title><link>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C-queue/</link><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C-queue/</guid><description>Рассмотрим структуры данных из стандартной библиотеки php (SPL) и процедурный подход с массивами. И замеряем скорость выполнения на разных версиях PHP, а именно на 5.6 и 7. Сегодняшняя тема: «структура Очередь».
Очередь — абстрактный тип данных с дисциплиной доступа к элементам «первый пришёл — первый вышел» (FIFO, First In — First Out). Добавление элемента (принято обозначать словом enqueue — поставить в очередь) возможно лишь в конец очереди, выборка — только из начала очереди (что принято называть словом dequeue — убрать из очереди), при этом выбранный элемент из очереди удаляется.</description></item><item><title>SPL VS процедуры и 5.6 VS 7 стек (stack)</title><link>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D1%81%D1%82%D0%B5%D0%BA-stack/</link><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D1%81%D1%82%D0%B5%D0%BA-stack/</guid><description>Сегодня рассмотрим структуры данных из стандартной библиотеки php (SPL) и процедурный подход с массивами. И замеряем скорость выполнения на разных версиях PHP, а именно на 5.6 и 7. Начнем с простого, структура Стек.
Стек (англ. stack — стопка; читается стэк) — абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»).
Чаще всего принцип работы стека сравнивают со стопкой тарелок: чтобы взять вторую сверху, нужно снять верхнюю.</description></item><item><title>PHP класс для распознавания текста на изображении</title><link>//bpt22.tech/posts/2015-05-30-php-%D0%BA%D0%BB%D0%B0%D1%81%D1%81-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8/</link><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-30-php-%D0%BA%D0%BB%D0%B0%D1%81%D1%81-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8/</guid><description>Для одного из проектов было необходимо распознать текст на изображении. Были варианты использования Tesseract, но была вероятность использования простого хостинга где не будет возможности установить дополнительный софт. Проанализировав доступные средства на GitHub нашел несколько реализаций, но они были на мой взгляд, то слишком сложные, то не простые для быстрой интеграции. В общем свой велосипед ближе и милей.
Класс поддерживает только текст написанный на монотонном фоне, без перемешивания строк. Такие изображения он не обработает:</description></item><item><title>Оптимизация freelance биржи</title><link>//bpt22.tech/posts/2015-05-22-%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-freelance-%D0%B1%D0%B8%D1%80%D0%B6%D0%B8/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-22-%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-freelance-%D0%B1%D0%B8%D1%80%D0%B6%D0%B8/</guid><description>Одна из главных моих болезней это все автоматизировать и реализовывать универсальные решения даже там где это не нужно. Но некоторые идеи могут оказаться полезными и облегчают жизнь. Один из таких проектов это оповещение о новых и интересных проектах на фриланс биржах.
Удобство заключается в том, что пользователю не нужно постоянно просматривать сайт на наличие интересующих его проектов. Выбрав интересующею категорию проектов и вводит перечень ключевых слов через пробел и в последствии скрипт с выбранной периодичностью заходит на сайт и проверяет проекты и сканирует текст на наличие ключевых слов.</description></item><item><title>Скрипты для автоматизации работы с любым GUI</title><link>//bpt22.tech/posts/2015-05-22-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%BB%D1%8E%D0%B1%D1%8B%D0%BC%D0%B8-gui/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-22-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%BB%D1%8E%D0%B1%D1%8B%D0%BC%D0%B8-gui/</guid><description>Автоматическое тестирование GUI иногда становится невозможным по причине отсутствия инструментов для осуществления его. Давно я наткнулся на инструмент SikuliX который работает с экраном и для него не важно в какой оболочке работает тестируемый объект. Некоторые скажут, что с этим инструментом можно кликать курсором в определенную область и вводить данные, без возможности обработать полученные данные в ответ, но с недавних пор в SikuliX внедрили распознавание текста с помощью OCR Tesseract. SikuliX поддерживает программирование на Jython и использование сочетаний клавиш системы.</description></item></channel></rss>
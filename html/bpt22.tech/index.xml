<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Evgen Pyanykh</title><link>//bpt22.tech/</link><description>Recent content on Evgen Pyanykh</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Sat, 17 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="//bpt22.tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Пост анализ относительной даты создания документа с приведением к timestamp</title><link>//bpt22.tech/posts/2018-11-17-%D0%BF%D0%BE%D1%81%D1%82-%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7-%D0%BE%D1%82%D0%BD%D0%BE%D1%81%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9-%D0%B4%D0%B0%D1%82%D1%8B-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0-%D1%81-%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC-%D0%BA-timestamp/</link><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2018-11-17-%D0%BF%D0%BE%D1%81%D1%82-%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7-%D0%BE%D1%82%D0%BD%D0%BE%D1%81%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9-%D0%B4%D0%B0%D1%82%D1%8B-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0-%D1%81-%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC-%D0%BA-timestamp/</guid><description>При сборе документов для анализа из открытых источников с дополнительной пост обработкой иногда нужно получить дату создания документа, но бывает так, что временная метка записана в человеко понятном формате в относительном виде и на не английском языке, в не структурированном виде. А документ мы пнинимает на обработку не во время получения скачивания.
Примеры входящих данных:
в понедельник, 14:33 две минуты назад вчера, 18:23 сегодня, 19:47 2018-11-17 18:22 Предварительный план Так как время призодит в разных языках и разных форматах, нам нужно привести несколько операций для понимания, того, что перед нами и в итоге получить Unix Timestamp.</description></item><item><title>Войти в IT</title><link>//bpt22.tech/posts/2017-02-01-%D0%B2%D0%BE%D0%B9%D1%82%D0%B8-%D0%B2-it/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2017-02-01-%D0%B2%D0%BE%D0%B9%D1%82%D0%B8-%D0%B2-it/</guid><description>В прошлом году я решил прокачать свои навыки по web frontend разработке. Верстка у меня на уровне ниже плинтуса по этому к ней подключаться не хочется, а иногда так хочется сделать красивую страничку для своего pet проекта. Андрей посоветовал пройти курс на freecodecamp.com. По началу было просто ибо там был только html и bootstrap стили. В день удавалось пройти по несколько десятков заданий за один присест. Но потом пришло время верстки и JS кодинга.</description></item><item><title>Поднятие и настройка Gitlab за Nginx в Docker контейнерах</title><link>//bpt22.tech/posts/2016-11-27-%D0%BF%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5-%D0%B8-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-gitlab-%D0%B7%D0%B0-nginx-%D0%B2-docker-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B0%D1%85/</link><pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-11-27-%D0%BF%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5-%D0%B8-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-gitlab-%D0%B7%D0%B0-nginx-%D0%B2-docker-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B0%D1%85/</guid><description>Удобных, открытых и приватных облачных хранилищ на текущий момент существует множество. Одни из популярных это Github и Bitbacket. Github предоставляет большое сообщество OS разработчиков, Bitbacket бесплатные приватные репозитории, но бывают прецеденты когда эти сервисы не доступны по техническим причинам или заблокированы на уровне вашего интернет провайдера. Именно после таких прецедентов начинаешь задумываться о поднятии локального хранилища с GUI.
И тогда нам на помощь приходит gitlab ce. Это удобный инструмент для просмотра в браузере кода, информирования об изменениях на почту, дискуссиях о коде в PullMergeRequest и много, много, много чего еще в этом инструменте есть.</description></item><item><title>Автоматическая проверка кода после commit или merge request</title><link>//bpt22.tech/posts/2016-10-15-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F-%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%BA%D0%BE%D0%B4%D0%B0-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5-commit-%D0%B8%D0%BB%D0%B8-merge-request/</link><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-10-15-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F-%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%BA%D0%BE%D0%B4%D0%B0-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5-commit-%D0%B8%D0%BB%D0%B8-merge-request/</guid><description>Я давно пользуюсь соц. сетью для программистов github. Для него существует множество сервисов которые дополняют статическую информацию о проекте динамической статистикой. Которая автоматически собирается и выводит полезную информацию для разработчика и для людей которые планируют использовать код из этого репозитория.
Для локальных pet проектов которые не хочется публиковать в os тоже было бы не плохо иметь подобный спектор услуг. Предупреждаю сразу, все ниже изложенное будет иметь отношение к проектам написанным на ЯП PHP и сопутствующим технологиям, но возможно применимо и к другим конфигурациям.</description></item><item><title>Пусть всегда будет SSL (подключение let's encrypt к вашему домену)</title><link>//bpt22.tech/posts/2016-10-15-%D0%BF%D1%83%D1%81%D1%82%D1%8C-%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-%D0%B1%D1%83%D0%B4%D0%B5%D1%82-ssl-%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-lets-encrypt-%D0%BA-%D0%B2%D0%B0%D1%88%D0%B5%D0%BC%D1%83-%D0%B4%D0%BE%D0%BC%D0%B5%D0%BD%D1%83/</link><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-10-15-%D0%BF%D1%83%D1%81%D1%82%D1%8C-%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-%D0%B1%D1%83%D0%B4%D0%B5%D1%82-ssl-%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-lets-encrypt-%D0%BA-%D0%B2%D0%B0%D1%88%D0%B5%D0%BC%D1%83-%D0%B4%D0%BE%D0%BC%D0%B5%D0%BD%D1%83/</guid><description>Про то, что нужно поднимать nginx перед всем подрят для контроля трафика, это всем известно, а прикручивать ssl для шифрования трафика и для понижения уровня паранойи, то что доктор прописал. Ниже будет описан способ для подключения бесплатного сервиса Let’s encrypt и ваших доменов с автоматическим продлением сертификатов.
Это первая часть из цикла инструкций на тему создание автоматического комплекса для анализа технического долга и качества проект.
Я использую Docker для всего подрят, так как с ним легко поднимать необходимое ПО и избавляться от этого ПО также легко без какиз либо последствий.</description></item><item><title>GIT push во все зеркала репозитория</title><link>//bpt22.tech/posts/2016-03-21-git-push-%D0%B2%D0%BE-%D0%B2%D1%81%D0%B5-%D0%B7%D0%B5%D1%80%D0%BA%D0%B0%D0%BB%D0%B0-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F/</link><pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-03-21-git-push-%D0%B2%D0%BE-%D0%B2%D1%81%D0%B5-%D0%B7%D0%B5%D1%80%D0%BA%D0%B0%D0%BB%D0%B0-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F/</guid><description>Паранойя никогда не бывает избыточной, особенно для меня. Когда я пишу код и вдруг теряю его по разным причинам, не сохранился, заснул на бекспейсе, диск с git репозиторием посыпался, я всегда расстраиваюсь и не хочу писать снова, то что уже было написано. Ниже будет описано как предохраниться от одной из этих проблем, а именно с потерей данных по средствам гибели HDD. Мы реализуем кросс пуш во все возможные хранилища для того чтоб уберечь наши труды от забвения.</description></item><item><title>SPL VS процедуры и 5.6 VS 7 очередь (queue)</title><link>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C-queue/</link><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C-queue/</guid><description>Рассмотрим структуры данных из стандартной библиотеки php (SPL) и процедурный подход с массивами. И замеряем скорость выполнения на разных версиях PHP, а именно на 5.6 и 7. Сегодняшняя тема: «структура Очередь».
Очередь — абстрактный тип данных с дисциплиной доступа к элементам «первый пришёл — первый вышел» (FIFO, First In — First Out). Добавление элемента (принято обозначать словом enqueue — поставить в очередь) возможно лишь в конец очереди, выборка — только из начала очереди (что принято называть словом dequeue — убрать из очереди), при этом выбранный элемент из очереди удаляется.</description></item><item><title>SPL VS процедуры и 5.6 VS 7 стек (stack)</title><link>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D1%81%D1%82%D0%B5%D0%BA-stack/</link><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-02-15-spl-vs-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D1%8B-%D0%B8-5.6-vs-7-%D1%81%D1%82%D0%B5%D0%BA-stack/</guid><description>Сегодня рассмотрим структуры данных из стандартной библиотеки php (SPL) и процедурный подход с массивами. И замеряем скорость выполнения на разных версиях PHP, а именно на 5.6 и 7. Начнем с простого, структура Стек.
Стек (англ. stack — стопка; читается стэк) — абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»).
Чаще всего принцип работы стека сравнивают со стопкой тарелок: чтобы взять вторую сверху, нужно снять верхнюю.</description></item><item><title>Поиск номера телефона в тексте</title><link>//bpt22.tech/posts/2016-01-17-%D0%BF%D0%BE%D0%B8%D1%81%D0%BA-%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%D0%B0-%D1%82%D0%B5%D0%BB%D0%B5%D1%84%D0%BE%D0%BD%D0%B0-%D0%B2-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B5/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-01-17-%D0%BF%D0%BE%D0%B8%D1%81%D0%BA-%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%D0%B0-%D1%82%D0%B5%D0%BB%D0%B5%D1%84%D0%BE%D0%BD%D0%B0-%D0%B2-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B5/</guid><description>Однажды, когда мы работали над одним из проектов по сбору информации про риелторов и их активности на рынке, мой товарищ спросил меня: «Можем ли мы определять адрес квартиры по тексту автоматически?», тогда я не мог даже корректно обрабатывать номера телефонов в тексте, не то что адреса, на подобии: «Не далеко от кинотеатра ‘N&amp;rsquo;». Теперь, я наконец научился находить номера телефонов в тексте и приводить их в стандартный вид. Ниже я опишу как это сделать.</description></item><item><title>Обновление форка репозитория через интерфейс github</title><link>//bpt22.tech/posts/2016-01-12-%D0%BE%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%BE%D1%80%D0%BA%D0%B0-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81-github/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2016-01-12-%D0%BE%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%BE%D1%80%D0%BA%D0%B0-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81-github/</guid><description>Часто бывает, что форкаешь чей-то репозиторий и вносишь не значительные изменения в проект и приходит время когда нужно обновить проект из оригинального репозитория, большенство информации либо уже не актуально относительно GUI github или предлагают скучный и долгий, но надежный способ через терминал. Ниже я опишу нативный способ через web интерфейс.
Да начнется обновление…
Для начала нам нужно перейти в свой Fork и нажать кнопку «New pull request».
В форме с выпадающими списками репозиториев нужно поменять направления слияния или, просто говоря, поменять местами.</description></item><item><title>Развертывание среды разработки с помощью docker</title><link>//bpt22.tech/posts/2015-11-08-%D1%80%D0%B0%D0%B7%D0%B2%D0%B5%D1%80%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D1%80%D0%B5%D0%B4%D1%8B-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-docker/</link><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-11-08-%D1%80%D0%B0%D0%B7%D0%B2%D0%B5%D1%80%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D1%80%D0%B5%D0%B4%D1%8B-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-docker/</guid><description>В работе мы используем много различных инструментов в каждом проекте и иногда они отличаются версиями и для запуска этих инструментов на локальной дев машине мы используем контейнеры для запуска в изолированной среде, где они не будут конфликтовать. Простой и удобный инструмент для подобных действий является Docker.
Dockerfile
Чтоб в последствии легко разворачивать подобные контейнеры нужно создать Dockerfile для создания снимка системы которым мы будем пользоваться в будущем. Пример создание php окружение с нужными расширениями уже внутри этого контейнера:</description></item><item><title>PHP класс для распознавания текста на изображении</title><link>//bpt22.tech/posts/2015-05-30-php-%D0%BA%D0%BB%D0%B0%D1%81%D1%81-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8/</link><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-30-php-%D0%BA%D0%BB%D0%B0%D1%81%D1%81-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8/</guid><description>Для одного из проектов было необходимо распознать текст на изображении. Были варианты использования Tesseract, но была вероятность использования простого хостинга где не будет возможности установить дополнительный софт. Проанализировав доступные средства на GitHub нашел несколько реализаций, но они были на мой взгляд, то слишком сложные, то не простые для быстрой интеграции. В общем свой велосипед ближе и милей.
Класс поддерживает только текст написанный на монотонном фоне, без перемешивания строк. Такие изображения он не обработает:</description></item><item><title>Автоматическое скачивание torrent из dropbox в ubuntu server</title><link>//bpt22.tech/posts/2015-05-24-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D1%81%D0%BA%D0%B0%D1%87%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-torrent-%D0%B8%D0%B7-dropbox-%D0%B2-ubuntu-server/</link><pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-24-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D1%81%D0%BA%D0%B0%D1%87%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-torrent-%D0%B8%D0%B7-dropbox-%D0%B2-ubuntu-server/</guid><description>Иногда когда отключают интернет или ведутся технические работы и заняться нечем встает вопрос: «а закачал ли я фильм/сериал/передачу?». За частую ответ: «Нет!» :(. Для того чтоб не возникало подобных ситуаций я хочу развернуть на своем локальном сервере хранилище для офлайновой загрузки контента и не перегружать WiFi сеть постоянно работающими торрентами. В качестве ОС я выбрал Ubuntu server, потому что потому.
Установка торрента
Источник
Устанавливаем torrent клиент «transmission». Он обладает удобным Web интерфейсом, который позволит нам останавливать или добавлять торренты в ручную.</description></item><item><title>Оптимизация freelance биржи</title><link>//bpt22.tech/posts/2015-05-22-%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-freelance-%D0%B1%D0%B8%D1%80%D0%B6%D0%B8/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-22-%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-freelance-%D0%B1%D0%B8%D1%80%D0%B6%D0%B8/</guid><description>Одна из главных моих болезней это все автоматизировать и реализовывать универсальные решения даже там где это не нужно. Но некоторые идеи могут оказаться полезными и облегчают жизнь. Один из таких проектов это оповещение о новых и интересных проектах на фриланс биржах.
Удобство заключается в том, что пользователю не нужно постоянно просматривать сайт на наличие интересующих его проектов. Выбрав интересующею категорию проектов и вводит перечень ключевых слов через пробел и в последствии скрипт с выбранной периодичностью заходит на сайт и проверяет проекты и сканирует текст на наличие ключевых слов.</description></item><item><title>Скрипты для автоматизации работы с любым GUI</title><link>//bpt22.tech/posts/2015-05-22-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%BB%D1%8E%D0%B1%D1%8B%D0%BC%D0%B8-gui/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>//bpt22.tech/posts/2015-05-22-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%BB%D1%8E%D0%B1%D1%8B%D0%BC%D0%B8-gui/</guid><description>Автоматическое тестирование GUI иногда становится невозможным по причине отсутствия инструментов для осуществления его. Давно я наткнулся на инструмент SikuliX который работает с экраном и для него не важно в какой оболочке работает тестируемый объект. Некоторые скажут, что с этим инструментом можно кликать курсором в определенную область и вводить данные, без возможности обработать полученные данные в ответ, но с недавних пор в SikuliX внедрили распознавание текста с помощью OCR Tesseract. SikuliX поддерживает программирование на Jython и использование сочетаний клавиш системы.</description></item><item><title>404: Page not found</title><link>//bpt22.tech/404/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//bpt22.tech/404/</guid><description>The page you are looking for does not exist.</description></item><item><title>Contacts</title><link>//bpt22.tech/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//bpt22.tech/contact/</guid><description>CV
bpteam22@gmail.com
Blog
fl.ru
GitHub
LinkedIn
LiveCoding
+380668637437
@bpteam22
bpteam22</description></item><item><title>License</title><link>//bpt22.tech/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//bpt22.tech/license/</guid><description>All blog posts are copyrighted by me and may not be reproduced without my permission.
All code samples are licensed under the MIT License, implying that you can use them as you see fit.</description></item><item><title>Skills</title><link>//bpt22.tech/skills/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//bpt22.tech/skills/</guid><description>Generation date 2018-10-03</description></item></channel></rss>